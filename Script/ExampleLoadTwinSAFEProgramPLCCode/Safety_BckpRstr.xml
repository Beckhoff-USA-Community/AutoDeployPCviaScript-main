<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Beckhoff Automation GmbH" productName="TwinCAT PLC Control" productVersion="3.5.13.21" creationDateTime="2023-01-20T09:34:09.9173048" />
  <contentHeader name="PLC1" modificationDateTime="2023-01-20T09:34:09.9253029">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="Safety_BckpRstr" pouType="program">
        <interface>
          <localVars>
            <variable name="fbEcStateMachine">
              <type>
                <derived name="FB_EcStateMachine" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Function to Get or Set device to specified state</xhtml>
              </documentation>
            </variable>
            <variable name="stEcSlaveState">
              <type>
                <derived name="ST_EcSlaveState" />
              </type>
            </variable>
            <variable name="stReqEcSlaveState">
              <type>
                <derived name="ST_EcSlaveState" />
              </type>
            </variable>
            <variable name="stGetSlaveState">
              <type>
                <derived name="ST_TcGeneralOutputs" />
              </type>
            </variable>
            <variable name="stSetSlaveState">
              <type>
                <derived name="ST_TcGeneralOutputs" />
              </type>
            </variable>
            <variable name="nProjectSN">
              <type>
                <UDINT />
              </type>
              <initialValue>
                <simpleValue value="1106314" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> better to be stored in File or on NOV-Ram</xhtml>
              </documentation>
            </variable>
            <variable name="nProjectCRC">
              <type>
                <WORD />
              </type>
              <initialValue>
                <simpleValue value="16#6207" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> better to be stored in File or on NOV-Ram</xhtml>
              </documentation>
            </variable>
            <variable name="nFoundSN">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Mapped to SerialNumber of EL69xx</xhtml>
              </documentation>
            </variable>
            <variable name="nFoundCRC">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Mapped to CRC of EL69xx</xhtml>
              </documentation>
            </variable>
            <variable name="nStateCheckSn">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="bInit">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="bSnOk">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="bCrcOk">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sMessageText">
              <type>
                <string />
              </type>
            </variable>
            <variable name="nTryCycle">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="bErrAck">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbCoE_EL69xx">
              <type>
                <derived name="FB_CoE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> #################################################
 CoE case functionality
 #################################################</xhtml>
              </documentation>
            </variable>
            <variable name="iCoe">
              <type>
                <derived name="I_CoE" />
              </type>
            </variable>
            <variable name="stCoE">
              <type>
                <derived name="ST_TcGeneralOutputs" />
              </type>
            </variable>
            <variable name="ReadSafetyCoE">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="bReadSafePlcInfoDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbSafetyBckpRstr">
              <type>
                <derived name="FB_SafetyBckpRstr" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> #############################################
 Backup and restore functionality
 #############################################</xhtml>
              </documentation>
            </variable>
            <variable name="stSafetyBckpRstr">
              <type>
                <derived name="ST_TcOutputsSafetyBckpRstr" />
              </type>
            </variable>
            <variable name="bRestore">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="bBackup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="bBtnRestore">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Visu-button to start restore</xhtml>
              </documentation>
            </variable>
            <variable name="bBtnBackup">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Visu-button to start backup</xhtml>
              </documentation>
            </variable>
            <variable name="bProjectRestored">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="bufEcNetId">
              <type>
                <array>
                  <dimension lower="0" upper="5" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="bReadSafePlcInfo">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//##################################################
// Case condition of backup and restore
//##################################################
CASE nStateCheckSn OF
0: (* Init State *)
	sMessageText := '';
	//##################################################
	// Device state
	//##################################################
	fbEcStateMachine.NetId := F_CreateAmsNetId(nIds:= GVL_SafetyBckpRstr.arEcNetId); 
	fbEcStateMachine.SlaveAddr := WORD_TO_UINT(GVL_SafetyBckpRstr.nEcPort);
	fbEcStateMachine.ReqSlaveState(bExecute := FALSE);
	fbEcStateMachine.GetSlaveState(bExecute := FALSE);
	stReqEcSlaveState.deviceState := 0;
	nTryCycle := 0;
	//##################################################
	// Backup and restore
	//##################################################
	bRestore := FALSE;
	bBackup := FALSE;
	bReadSafePlcInfo := FALSE;
	fbSafetyBckpRstr.SaveLogicProgram(bExecute := FALSE);
	fbSafetyBckpRstr.RestoreLogicProgram(bExecute := FALSE);
	bufEcNetId := GVL_SafetyBckpRstr.arEcNetId;
	fbSafetyBckpRstr.EcNetId REF= bufEcNetId;
	fbSafetyBckpRstr.EcPort := GVL_SafetyBckpRstr.nEcPort;
	fbSafetyBckpRstr.Buffer REF= GVL_SafetyBckpRstr.arBufferBckpRstr;
	fbSafetyBckpRstr.NetIdRWFile := GVL_SafetyBckpRstr.sNetIdRWFileBckpRstr;
	fbSafetyBckpRstr.FileName := GVL_SafetyBckpRstr.sFileNameBckpRstr;
	
	IF bInit THEN
		stReqEcSlaveState.deviceState := EC_DEVICE_STATE_PREOP;
		nStateCheckSn := 20; // Get EL69xx
	END_IF
	//############################
	// Manual Backup
	IF bBtnBackup THEN
		nStateCheckSn := 100; // Backup safety project
	END_IF
	//############################
	// Manual Restore		
	IF bBtnRestore THEN
		nStateCheckSn := 110; // Restore safety project
	END_IF
		
10: (* Request State of EL69xx *)
	fbEcStateMachine.EcSetState := stReqEcSlaveState.deviceState;
	fbEcStateMachine.ReqSlaveState(bExecute := TRUE, stSetSlaveState =&gt; stSetSlaveState);
	
	IF NOT stSetSlaveState.bError THEN
		IF NOT stSetSlaveState.bBusy THEN
			fbEcStateMachine.ReqSlaveState(bExecute := FALSE);
			nStateCheckSn := 20;
		END_IF
	ELSE
		sMessageText := 'Error "Set State"';
		nStateCheckSn := 777;
	END_IF
	
20: (* GetSlaveState of EL69xx *)
	fbEcStateMachine.GetSlaveState(bExecute := TRUE, stGetSlaveState =&gt; stGetSlaveState);
	stEcSlaveState := fbEcStateMachine.EcGetState;
	
 	IF NOT stGetSlaveState.bError THEN
		IF NOT stGetSlaveState.bBusy AND (stEcSlaveState.deviceState = stReqEcSlaveState.deviceState) AND NOT bInit AND bRestore THEN
			fbEcStateMachine.GetSlaveState(bExecute := FALSE);
			nTryCycle := 0;
			nStateCheckSn := 110;
		ELSIF NOT stGetSlaveState.bBusy AND (stEcSlaveState.deviceState = stReqEcSlaveState.deviceState) AND NOT bInit THEN
			fbEcStateMachine.GetSlaveState(bExecute := FALSE);
			nTryCycle := 0;
			nStateCheckSn := 0;	
		ELSIF NOT stGetSlaveState.bBusy AND (stEcSlaveState.deviceState = stReqEcSlaveState.deviceState) AND bInit THEN
			fbEcStateMachine.GetSlaveState(bExecute := FALSE);
			nTryCycle := 0;
			nStateCheckSn := 30;
		ELSIF NOT stGetSlaveState.bBusy AND (stEcSlaveState.deviceState &lt;&gt; stReqEcSlaveState.deviceState) AND (nTryCycle &lt; 9) THEN
			fbEcStateMachine.GetSlaveState(bExecute := FALSE);
			nTryCycle := nTryCycle + 1;
			nStateCheckSn := 10;
		ELSIF NOT stGetSlaveState.bBusy AND (stEcSlaveState.deviceState &lt;&gt; stReqEcSlaveState.deviceState) AND (nTryCycle &gt;= 9) THEN
			fbEcStateMachine.GetSlaveState(bExecute := FALSE);
			nStateCheckSn := 777;
		END_IF
	ELSE
		sMessageText := 'Error "Get State"';
		nStateCheckSn := 777;
	END_IF
	
30: (* Check SN *)	
	bReadSafePlcInfo := TRUE; // Start CoE request of SafePlcInfoData
	IF bReadSafePlcInfoDone THEN
		IF (nProjectSN = nFoundSN) THEN
			bSnOk := TRUE;
			nStateCheckSn := 40; // Check CRC
		ELSE
			nProjectSN := nFoundSN;
			bSnOk := FALSE;
			nStateCheckSn := 40; // Check CRC
		END_IF	
	END_IF

40: (* Check CRC *)
	bInit := FALSE;
	IF (nProjectCRC = nFoundCRC) AND NOT  bProjectRestored THEN
		bCrcOk := TRUE;
		stReqEcSlaveState.deviceState := EC_DEVICE_STATE_OP;
		nStateCheckSn := 10; // Set EL69xx to OP
	ELSIF (nFoundCRC &lt;&gt; 0) AND bProjectRestored THEN
		nProjectCRC := nFoundCRC;
		bCrcOk := TRUE;
		nStateCheckSn := 0;
	ELSE 
		bCrcOk := FALSE;
		nStateCheckSn := 50; // Check CRC
	END_IF
	
50: (* CRC zero ? -&gt; New EL69xx *)	
	IF (nFoundCRC = 0) THEN
		stReqEcSlaveState.deviceState := EC_DEVICE_STATE_OP;
		bRestore := TRUE;
		nStateCheckSn := 10; // Set EL69xx to OP		
	ELSE
		sMessageText := 'No way out! Download with engineering system!';
		nStateCheckSn := 777;	
	END_IF

100: (* Backup *)
	fbSafetyBckpRstr.SaveLogicProgram(bExecute := TRUE, stTcOutputsSafetyBckp =&gt; stSafetyBckpRstr);
	
	IF stSafetyBckpRstr.stTcGeneralOutputs.bError THEN
		sMessageText := 'Error "Backup"';
		nStateCheckSn := 777;
	ELSIF stSafetyBckpRstr.stTcGeneralOutputs.bDone  THEN
		nStateCheckSn := 0;
	END_IF
	
110: (* Restore Projekt *)
	fbSafetyBckpRstr.RestoreLogicProgram(bExecute := TRUE, stTcOutputsSafetyRstr =&gt; stSafetyBckpRstr);
	
	IF stSafetyBckpRstr.stTcGeneralOutputs.bError THEN
		sMessageText := 'Error "Restore"';
		nStateCheckSn := 777;
	ELSIF stSafetyBckpRstr.stTcGeneralOutputs.bDone  THEN
		bProjectRestored := TRUE;
		nStateCheckSn := 30; // Check SN and CRC again
	END_IF
777: (* Error *)
	IF bErrAck THEN
		sMessageText := '';
		stSafetyBckpRstr.sResult := '';
		nStateCheckSn := 0;
	END_IF
END_CASE

//##################################################
// Case condition of CoE read parameters of SafePLC
//##################################################
CASE ReadSafetyCoE OF
0: (* initialization *)	
	bReadSafePlcInfoDone := FALSE;
	IF bReadSafePlcInfo THEN
		bReadSafePlcInfo := FALSE;
		iCoE := fbCoE_EL69xx;
		iCoe.NetId := F_CreateAmsNetId(nIds:= GVL_SafetyBckpRstr.arEcNetId); 
		iCoE.SlaveAddress := 1008; // Address of EL69xx
		ReadSafetyCoE := 10;
	END_IF
	
10:	(* Read serial number of slave *)
	iCoE.Index := 16#F980;
	iCoE.SubIndex := 16#2;
	iCoE.DstBuf := ADR(nFoundSN);
	iCoE.BufLen := SIZEOF(nFoundSN);
	iCoE.CoERead(bExecute:=TRUE, stCoeRead=&gt; stCoE);	
	
	IF stCoE.bError THEN
		ReadSafetyCoE := 777;
	ELSIF NOT stCoE.bBusy THEN
		iCoE.CoERead(bExecute:=FALSE, stCoeRead=&gt; stCoE);
		ReadSafetyCoE := 30;
	END_IF

30:	(* Read crc of slave *)
	iCoE.Index := 16#F980;
	iCoE.SubIndex := 16#3;
	iCoE.DstBuf := ADR(nFoundCRC);
	iCoE.BufLen := SIZEOF(nFoundCRC);
	iCoE.CoERead(bExecute:=TRUE, stCoeRead=&gt; stCoE);	
	
	IF stCoE.bError THEN
		ReadSafetyCoE := 777;
	ELSIF NOT stCoE.bBusy THEN
		iCoE.CoERead(bExecute:=FALSE, stCoeRead=&gt; stCoE);
		bReadSafePlcInfoDone := TRUE;
		ReadSafetyCoE := 0;
	END_IF
	
777: (* Error *)
	IF bErrAck THEN
		ReadSafetyCoE := 0;
	END_IF
END_CASE</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>95235ad6-8c26-41d9-9dfb-6be8012dc885</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="Safety_BckpRstr" ObjectId="95235ad6-8c26-41d9-9dfb-6be8012dc885" />
      </ProjectStructure>
    </data>
  </addData>
</project>